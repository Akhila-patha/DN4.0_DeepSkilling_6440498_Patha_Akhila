CREATE TABLE Customers (
    CustomerID NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    DOB DATE,
    Balance NUMBER,
    LastModified DATE
);

CREATE TABLE Accounts (
    AccountID NUMBER PRIMARY KEY,
    CustomerID NUMBER,
    AccountType VARCHAR2(20),
    Balance NUMBER,
    LastModified DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE Transactions (
    TransactionID NUMBER PRIMARY KEY,
    AccountID NUMBER,
    TransactionDate DATE,
    Amount NUMBER,
    TransactionType VARCHAR2(10),
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);

CREATE TABLE Loans (
    LoanID NUMBER PRIMARY KEY,
    CustomerID NUMBER,
    LoanAmount NUMBER,
    InterestRate NUMBER,
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE Employees (
    EmployeeID NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Position VARCHAR2(50),
    Salary NUMBER,
    Department VARCHAR2(50),
    HireDate DATE
); 

CREATE TABLE Error_Log (
    ErrorID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ErrorDate DATE DEFAULT SYSDATE,
    ErrorMessage VARCHAR2(4000)
);

INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
VALUES (1, 'John Doe', TO_DATE('1985-05-15', 'YYYY-MM-DD'), 1000, SYSDATE);

INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
VALUES (2, 'Jane Smith', TO_DATE('1990-07-20', 'YYYY-MM-DD'), 1500, SYSDATE);

INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
VALUES (1, 1, 'Savings', 1000, SYSDATE);

INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
VALUES (2, 2, 'Checking', 1500, SYSDATE);

INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (1, 1, SYSDATE, 200, 'Deposit');

INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (2, 2, SYSDATE, 300, 'Withdrawal');

INSERT INTO Loans (LoanID, CustomerID, LoanAmount, InterestRate, StartDate, EndDate)
VALUES (1, 1, 5000, 5, SYSDATE, ADD_MONTHS(SYSDATE, 60));

INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
VALUES (1, 'Alice Johnson', 'Manager', 70000, 'HR', TO_DATE('2015-06-15', 'YYYY-MM-DD'));

INSERT INTO Employees (EmployeeID, Name, Position, Salary, Department, HireDate)
VALUES (2, 'Bob Brown', 'Developer', 60000, 'IT', TO_DATE('2017-03-20', 'YYYY-MM-DD'));
CREATE OR REPLACE PROCEDURE AddNewCustomer (
    p_CustomerID   IN Customers.CustomerID%TYPE,
    p_Name         IN Customers.Name%TYPE,
    p_DOB          IN Customers.DOB%TYPE,
    p_Balance      IN Customers.Balance%TYPE
)
IS
    v_ErrorMessage VARCHAR2(4000);
BEGIN
    -- Attempt to insert a new customer
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_CustomerID, p_Name, p_DOB, p_Balance, SYSDATE);

    -- Optionally log success (if you're using Procedure_Log)
    -- INSERT INTO Procedure_Log (Message) VALUES ('Customer added: ID ' || p_CustomerID);

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        -- Handle duplicate CustomerID error
        v_ErrorMessage := 'Error: CustomerID ' || TO_CHAR(p_CustomerID) || ' already exists.';
        INSERT INTO Error_Log (ErrorMessage) VALUES (v_ErrorMessage);

    WHEN OTHERS THEN
        -- Handle any other unexpected errors
        v_ErrorMessage := 'Unexpected error for CustomerID ' || TO_CHAR(p_CustomerID) || ': ' || SQLERRM;
        INSERT INTO Error_Log (ErrorMessage) VALUES (v_ErrorMessage);
END;
/
-- Insert a new customer (should succeed)
EXEC AddNewCustomer(3, 'Michael Scott', TO_DATE('1975-03-15', 'YYYY-MM-DD'), 2000);

-- Try inserting a customer with an existing ID (should log error)
EXEC AddNewCustomer(1, 'Duplicate John', TO_DATE('1990-01-01', 'YYYY-MM-DD'), 100);

-- View error log
SELECT * FROM Error_Log ORDER BY ErrorDate DESC;
